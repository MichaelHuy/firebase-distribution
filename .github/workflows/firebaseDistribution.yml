name: Firebase Distribution

on:
  push:
    branches: [master]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3


      - uses: madhead/read-java-properties@latest
        id: all
        with:
          file: ./android/gradle.properties
          all: true


      - name: Extract branch name
        shell: bash
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >>$GITHUB_OUTPUT
        id: extract_branch
          
      - name: Update app version for pull request
        if: contains(${{ steps.extract_branch.outputs.branch }}, 'merge')
        run: |
         echo $PR_NUMBER
         echo ${{ steps.extract_branch.outputs.branch }}
         echo "VERSION_NAME_ANDROID=${{ steps.all.outputs.VERSION_NAME_ANDROID }}.$PR_NUMBER" >> ./android/gradle.properties
        env:
          PR_NUMBER: ${{ github.event.number }}


      # cache pod install to save time
      # - name: Restore Pods cache
      #   uses: actions/cache@v3
      #   id: cache-node-modules
      #   with:
      #     path: |
      #       node-modules
      #     key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-modules-

      # - name: Yarn install
      #   run: |
      #     yarn install
      #   if: steps.cache-node-modules.outputs.cache-hit != 'true'

      # - name: Extract Branch Name
      #   run: |
      #     echo "BRANCH=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV

  # releaseBeta:
  #   needs: build
  #   runs-on: macos-latest
  #   environment: "prod"

  #   steps:
  #     - uses: actions/checkout@v3
  #     # cache pod install to save time
  #     - name: Restore Pods cache
  #       uses: actions/cache@v3
  #       id: cache-node-modules
  #       with:
  #         path: |
  #           node-modules
  #         key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-node-modules

  #     - name: Yarn install
  #       run: |
  #         yarn install
  #         cd -
  #       if: steps.cache-node-modules.outputs.cache-hit != 'true'


# jobs:
#   firebaseDistribution:
#     runs-on: macos-latest

#     steps:
#       - uses: actions/checkout@v2

#       - uses: actions/setup-ruby@v1
#         with:
#           ruby-version: '2.6'

#       - name: Install bundle
#         run: |
#           gem install bundler:2.3.11
#           cd android && \
#           bundle config path vendor/bundle
#           bundle install --jobs 4 --retry 3
#           cd -

#       - name: Cache Ruby - Bundler
#         uses: actions/cache@v2
#         with:
#           path: vendor/bundle
#           key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
#           restore-keys: |
#             ${{ runner.os }}-gems-

#       - name: Cache Gradle
#         uses: actions/cache@v1
#         with:
#           path: ~/.gradle/caches/
#           key: cache-clean-gradle-${{ matrix.os }}-${{ matrix.jdk }}

#       - name: Cache Gradle Wrapper
#         uses: actions/cache@v1
#         with:
#           path: ~/.gradle/wrapper/
#           key: cache-clean-wrapper-${{ matrix.os }}-${{ matrix.jdk }}

#       - name: Configure Keystore
#         run: |
#           echo "$ANDROID_KEYSTORE_FILE" > my-upload-key.keystore.b64
#           base64 -d -i my-upload-key.keystore.b64 > android/app/my-upload-key.keystore
#           echo "MYAPP_UPLOAD_STORE_FILE=my-upload-key.keystore" >> android/gradle.properties
#           echo "MYAPP_UPLOAD_KEY_ALIAS=$KEYSTORE_KEY_ALIAS" >> android/gradle.properties
#           echo "MYAPP_UPLOAD_STORE_PASSWORD=$KEYSTORE_STORE_PASSWORD" >>android/gradle.properties
#           echo "MYAPP_UPLOAD_KEY_PASSWORD=$KEYSTORE_KEY_PASSWORD" >> android/gradle.properties
#         env:
#           ANDROID_KEYSTORE_FILE: ${{ secrets.ANDROID_KEYSTORE_FILE }}
#           KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
#           KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
#           KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}

#       - name: Create Firebase Service Credentials file
#         run: |
#           echo "$FIREBASE_CREDENTIALS" > firebase_credentials.json.b64
#           base64 -d -i firebase_credentials.json.b64 > android/firebase_credentials.json
#         env:
#           FIREBASE_CREDENTIALS: ${{ secrets.FIREBASE_CREDENTIALS }}

#       - name: Distribute app with ðŸ”¥ App Distribution ðŸš€
#         run: |
#           yarn install && \
#           cd android && \
#           bundle exec fastlane distribute
#           cd -
#         env:
#           FIREBASE_APP_ID: ${{ secrets.FIREBASE_ANDROID_APP_ID }}

